<template>
  <div class="chat-box">
    <div class="container">
      <div class="sidebar">
        <div class="navbar">
          <span class="logo">Chats</span>
          <!-- <div class="user">
            <img src="/assets/profileImages/download.jpg" alt="" />
            <span>Name</span>
          </div> -->
        </div>
        <div class="search">
          <div class="searchForm">
            <input type="text" placeholder="Find a user" v-model="keyword" />
          </div>
          <div class="conversations">
            <div
              class="userChat"
              v-for="(user, index) in Users"
              v-if="
                Users.length > 0 && keyword.length > 0 && authUser.id != user.id
              "
              :key="user.id"
              @click="handleSelect(index)"
            >
              <img :src="user.image" alt="" />
              <div class="userChatInfo">
                <span>{{ user.name }}</span>
              </div>
            </div>
          </div>
        </div>
        <div class="conversations">
          <div
            v-if="conversations.length > 0"
            v-for="(user, index) in conversations"
            :key="index"
          >
            <!-- {Object.entries(chats)?.sort((a,b)=>b[1].date - a[1].date).map((chat) => ( -->
            <div
              class="userChat"
              v-if="user.from_id == authUser.id"
              @click="getSelectedUserChat(user.to_user, user.id)"
            >
              <img :src="user.to_user.image" alt="" />
              <div class="userChatInfo">
                <span>{{ user.to_user.name }}</span>
                <!-- <p>{{ toUser.name }}</p> -->
              </div>
            </div>
            <div
              class="userChat"
              v-if="user.to_id == authUser.id"
              @click="getSelectedUserChat(user.from_user, user.id)"
            >
              <img :src="user.from_user.image" alt="" />
              <div class="userChatInfo">
                <span>{{ user.from_user.name }}</span>
                <!-- <p>{{ fromUser.name }}</p> -->
              </div>
            </div>
            <!-- ))} -->
          </div>
        </div>
      </div>
      <div class="chat" v-if="isActive">
        <div class="chatInfo">
          <img :src="this.selectedUserInfo.selectedUserImage" alt="" />

          <span>{{ this.selectedUserInfo.selectedUserName }}</span>
          <!-- <div class="chatIcons">
            <img src="/assets/profileImages/download.jpg" alt="" />
            <img src="/assets/profileImages/download.jpg" alt="" />
            <img src="/assets/profileImages/download.jpg" alt="" />
          </div> -->
        </div>
        <div class="messages" ref="scrollToMe">
          <div v-if="messages.length > 0">
            <div
              v-for="msg in messages"
              v-if="msg.room_id == selectedUserInfo.room_id"
            >
              <div
                class="message justify-content-end"
                v-if="msg.from_id == authUser.id"
              >
                <!-- <div class="messageInfo">
                <img :src="msg.image" alt="" />
                <span>just now</span>
              </div> -->
                <div class="messageContentRight">
                  <!-- <a>{{ msg.name }}</a> -->

                  <p>{{ msg.msg }}</p>

                  <!-- <img src="/assets/profileImages/download.jpg" alt="" /> -->
                </div>
              </div>
              <div class="message" v-else>
                <!-- <div class="messageInfo">
                  <img :src="msg.from_user.image" alt="" />
                  <span>just now</span>
                </div> -->
                <div class="messageContentLeft">
                  <!-- <a>{{ msg.from_user.name }}</a> -->

                  <p>{{ msg.msg }}</p>

                  <!-- <img src="/assets/profileImages/download.jpg" alt="" /> -->
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="input">
          <input
            type="text"
            placeholder="Type something..."
            v-model="data.msg"
          />
          <div class="send">
            <!-- <img src="{Attach}" alt="" /> -->
            <!-- <input type="file" style={{ display: "none" }}
            id="file" onChange={(e) => setImg(e.target.files[0])} /> -->
            <!-- <label htmlFor="file">
              <img src="{Img}" alt="" />
            </label> -->

            <Icon type="md-send" @click="sendMsg" />
          </div>
        </div>
      </div>
      <div class="chat" v-else>
        <div class="chatInfo"></div>
        <div class="text-center">
          <h2>Select a user to chat</h2>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
const { io } = require("socket.io-client");
import { mapGetters } from "vuex";

export default {
  data() {
    return {
      isActive: false,
      data: {
        msg: "",
      },
      messages: [],
      Users: [],
      keyword: "",
      limit: 5,
      conversations: [],
      selectedUserChat: [],
      room_id: "",
      selectedUserId: "",
      selectedUserImage: "",
      selectedUserSlug: "",
      selectedUserName: "",
      index: -1,
      limit: 6,
      socket: null,
    };
  },
  computed: {
    ...mapGetters({
      selectedUserInfo: "getSelectedUserInfo",
    }),
  },
  watch: {
    keyword(after, before) {
      this.getResults();
    },
  },
  methods: {
    async getResults() {
      const res = await this.callApi(
        "get",
        `/api/search?keyword=${this.keyword}&limit=${this.limit}`
      );
      if (res.status == 200) {
        this.Users = res.data;
      } else {
        this.swr();
      }
    },
    async handleSelect(index) {
      console.log(this.conversations);
      let info = {
        selectedUserId: this.Users[index].id,
        selectedUserImage: this.Users[index].image,
        selectedUserSlug: this.Users[index].slug,
        selectedUserName: this.Users[index].name,
      };
      let obj = {
        id: this.Users[index].id,
        image: this.Users[index].image,
        slug: this.Users[index].slug,
        name: this.Users[index].name,
      };
      this.$store.commit("setSelectedUserInfo", info);
      this.isActive = true;
      if (this.conversations.length == 0) {
        let obj = {
          from_id: this.authUser.id,
          to_id: this.Users[index].id,
        };
        const res = await this.callApi("post", `/api/add_conversation`, obj);
        if (res.status == 200) {
          this.getSelectedUserChat(obj, res.data.id);
          // this.Users = [];
          this.keyword = "";
        } else {
          this.swr();
        }
      } else {
        for (let conv of this.conversations) {
          if (
            this.selectedUserInfo.selectedUserId == conv.from_id ||
            this.selectedUserInfo.selectedUserId == conv.to_id
          ) {
            this.getSelectedUserChat(obj, conv.id);
          } else {
            let obj = {
              from_id: this.authUser.id,
              to_id: this.selectedUserInfo.selectedUserId,
            };
            const res = await this.callApi(
              "post",
              `/api/add_conversation`,
              obj
            );
            if (res.status == 200) {
              // this.conversations = res.data;
              this.getSelectedUserChat(obj, res.data.id);
              // this.Users = [];
              this.keyword = "";
            } else {
              this.swr();
            }
          }
        }
      }
    },

    scrollToEnd() {
      const el = this.$refs.scrollToMe;

      if (el) {
        // Use el.scrollIntoView() to instantly scroll to the element
        el.scrollTop = el.scrollHeight + 120;
      }
    },
    async getSelectedUserChat(user, index) {
      let info = {
        room_id: index,
        selectedUserId: user.id,
        selectedUserImage: user.image,
        selectedUserSlug: user.slug,
        selectedUserName: user.name,
      };
      this.$store.commit("setSelectedUserInfo", info);

      // this.selectedUserId = this.selectedUserInfo.selectedUserId;
      // this.selectedUserImage = this.selectedUserInfo.selectedUserImage;
      // this.selectedUserSlug = this.selectedUserInfo.selectedUserSlug;
      // this.selectedUserName = this.selectedUserInfo.selectedUserName;
      let roomId = index;
      this.isActive = true;
      const res = await this.callApi(
        "get",
        `/api/get_chat?limit=${this.limit}&roomId=${roomId}`
      );
      if (res.status == 200) {
        this.selectedUserChat = res.data.data;
        for (let t of this.selectedUserChat) {
          this.messages.push(t);
        }
      }
    },
    async sendMsg() {
      //   console.log(this.data.msg);
      let obj = {
        room_id: this.selectedUserInfo.room_id,
        from_id: this.authUser.id,
        to_id: this.selectedUserInfo.selectedUserId,
        image: this.authUser.image,
        name: this.authUser.name,
        msg: this.data.msg,
      };
      this.socket.emit("sendChatToServer", obj);
      let obj1 = {
        room_id: this.selectedUserInfo.room_id,
        from_id: this.authUser.id,
        to_id: this.selectedUserInfo.selectedUserId,
        msg: this.data.msg,
        image: "",
      };
      this.data.msg = "";
      const res = await this.callApi("post", `/api/add_chat`, obj1);
    },

    async getConversations() {
      const res = await this.callApi("get", `/api/get_conversation`);
      if (res.status == 200) {
        this.conversations = res.data.data;
      }
    },
  },
  async mounted() {
    this.socket = io("http://localhost:5000", {
      methods: ["GET", "POST"],
      transports: ["websocket"],
      credentials: true,
    });
    this.scrollToEnd();
    this.socket.on("sendChatToClient", (data) => {
      if (data.room_id == this.selectedUserInfo.room_id) {
        this.messages.push(data);
      }

      // else if (
      //   data.to_id == this.selectedUserInfo.selectedUserId &&
      //   data.from_id == this.authUser.id
      // ) {
      //   this.messages.push(data);
      // }
    });
    // this.selectedUserId = this.selectedUserInfo.selectedUserId;
    // this.selectedUserImage = this.selectedUserInfo.selectedUserImage;
    // this.selectedUserSlug = this.selectedUserInfo.selectedUserSlug;
    // this.selectedUserName = this.selectedUserInfo.selectedUserName;
  },
  updated() {
    this.scrollToEnd();
  },
  async created() {
    this.getConversations();

    this.socket = io("http://localhost:5000", {
      methods: ["GET", "POST"],
      transports: ["websocket"],
      credentials: true,
    });
  },
};
</script>
